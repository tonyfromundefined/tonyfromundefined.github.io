{"version":3,"sources":["webpack:///./src/templates/tag.tsx"],"names":["query","TemplateTag","data","sidebar","total","allPosts","totalCount","categories","group","filter","name","map","count","tags","posts","nodes","post","frontmatter","title","author","date","fields","slug","key","authorName","join","createdAt","Date"],"mappings":"4LAwDaA,EAAQ,aAmCNC,UAjFkC,SAAC,GAAa,IAAXC,EAAW,EAAXA,KAClD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,QAAS,CACPC,MAAOF,EAAKG,SAASC,WACrBC,WAAYL,EAAKK,WAAWC,MACzBC,QAAO,SAACD,GAAD,YACgB,IAAfA,EAAME,MACE,OAAfF,EAAME,QAEPC,KAAI,kBAAsB,CACzBD,KADG,EAAGA,KAENE,MAFG,EAASA,UAIhBC,KAAMX,EAAKW,KAAKL,MACbC,QAAO,SAACD,GAAD,YACgB,IAAfA,EAAME,MACE,OAAfF,EAAME,QAEPC,KAAI,kBAAe,CAClBD,KADG,EAAGA,WAKXR,EAAKY,MAAMC,MAAMJ,KAAI,SAACK,GAAD,OACpBA,EAAKC,aACLD,EAAKC,YAAYC,OACjBF,EAAKC,YAAYE,QACjBH,EAAKC,YAAYG,MACjBJ,EAAKK,QACLL,EAAKK,OAAOC,MAEZ,kBAAC,IAAD,CACEC,IAAKP,EAAKK,OAAOC,KACjBJ,MAAOF,EAAKC,YAAYC,MACxBM,WAAYR,EAAKC,YAAYE,OAAOM,KAAK,MACzCC,UAAW,IAAIC,KAAKX,EAAKC,YAAYG,MACrCE,KAAMN,EAAKK,OAAOC","file":"component---src-templates-tag-tsx-d8b3a520b74d28c0c92b.js","sourcesContent":["import { graphql } from 'gatsby'\nimport React from 'react'\nimport Layout from '~/components/Layout'\nimport PostListItem from '~/components/molecules/PostListItem'\nimport SectionWithSidebar from '~/components/SectionWithSidebar'\nimport { GetTagTemplateQuery } from '../generated/graphql'\n\ninterface ITemplateTagProps {\n  data: GetTagTemplateQuery\n}\nconst TemplateTag: React.FC<ITemplateTagProps> = ({ data }) => {\n  return (\n    <Layout>\n      <SectionWithSidebar\n        sidebar={{\n          total: data.allPosts.totalCount,\n          categories: data.categories.group\n            .filter((group) => (\n              typeof group.name !== 'undefined' &&\n              group.name !== null\n            ))\n            .map(({ name, count }) => ({\n              name: name!,\n              count,\n            })),\n          tags: data.tags.group\n            .filter((group) => (\n              typeof group.name !== 'undefined' &&\n              group.name !== null\n            ))\n            .map(({ name }) => ({\n              name: name!,\n            })),\n        }}\n      >\n        {data.posts.nodes.map((post) => (\n          post.frontmatter &&\n          post.frontmatter.title &&\n          post.frontmatter.author &&\n          post.frontmatter.date &&\n          post.fields &&\n          post.fields.slug\n        ) && (\n          <PostListItem\n            key={post.fields.slug}\n            title={post.frontmatter.title}\n            authorName={post.frontmatter.author.join(', ')}\n            createdAt={new Date(post.frontmatter.date)}\n            slug={post.fields.slug}\n          />\n        ))}\n      </SectionWithSidebar>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query getTagTemplate($tag: String) {\n    allPosts: allMarkdownRemark {\n      totalCount\n    }\n    posts: allMarkdownRemark(\n      limit: 5000,\n      sort: { fields: [frontmatter___date], order: DESC },\n      filter: { frontmatter: { tags: { in: [$tag] }}},\n    ) {\n      nodes {\n        frontmatter {\n          title\n          date\n          author\n        }\n        fields {\n          slug\n        }\n      }\n    }\n    categories: allMarkdownRemark(limit: 5000) {\n      group(field: frontmatter___category) {\n        name: fieldValue\n        count: totalCount\n      }\n    }\n    tags: allMarkdownRemark(limit: 5000) {\n      group(field: frontmatter___tags) {\n        name: fieldValue\n      }\n    }\n  }\n`\n\nexport default TemplateTag\n"],"sourceRoot":""}